<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.profect.tickle.domain.event.mapper.EventMapper">

    <resultMap id="CouponListMap" type="com.profect.tickle.domain.event.dto.response.CouponListResponseDto">
        <constructor>
            <arg column="id" javaType="java.lang.Long"/>
            <arg column="name" javaType="java.lang.String"/>
            <arg column="rate" javaType="short"/>
            <arg column="eventId" javaType="java.lang.Long"/>
            <arg column="validDate" javaType="java.time.Instant"/>
        </constructor>
    </resultMap>
    <resultMap id="TicketListMap" type="com.profect.tickle.domain.event.dto.response.TicketListResponseDto">
        <constructor>
            <arg column="id" javaType="java.lang.Long"/>
            <arg column="name" javaType="java.lang.String"/>
            <arg column="perPrice" javaType="short"/>
            <arg column="img" javaType="java.lang.String"/>
            <arg column="statusId" javaType="java.lang.Long"/>
            <arg column="startDate" javaType="java.time.Instant"/>
            <arg column="endDate" javaType="java.time.Instant"/>
        </constructor>
    </resultMap>

    <select id="findCouponEventList" resultMap="CouponListMap">
        SELECT
            c.coupon_id AS id,
            c.coupon_name AS name,
            c.coupon_rate AS rate,
            e.event_id AS eventId,
            c.coupon_valid AS validDate
        FROM coupon c
            JOIN event e ON c.coupon_id = e.coupon_id
        WHERE c.coupon_valid >= NOW()
        ORDER BY c.coupon_created_at DESC
            LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="findTicketEventList" resultMap="TicketListMap">
        SELECT
        e.event_id AS id,
        e.event_name AS name,
        e.event_per_price AS perPrice,
        p.performance_img AS img,
        st.status_id AS statusId,
        p.performance_start_date AS startDate,
        p.performance_end_date AS endDate
        FROM event e
        JOIN seat s ON e.event_id = s.event_id
        JOIN performance p ON s.performance_id = p.performance_id
        JOIN status st ON e.status_id = st.status_id
        WHERE p.performance_end_date &gt;= NOW()
        ORDER BY e.event_created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countCouponEvents" resultType="long">
        SELECT COUNT(*)
        FROM coupon c
        WHERE EXISTS (
            SELECT 1
            FROM event e
                     JOIN status s ON e.status_id = s.status_id
            WHERE e.coupon_id = c.coupon_id
            AND c.coupon_valid >= NOW()
        )
    </select>

    <select id="countTicketEvents" resultType="int">
        SELECT COUNT(*)
        FROM event e
        JOIN status s ON e.status_id = s.status_id
        JOIN seat se ON e.seat_id = se.seat_id
        JOIN performance p ON se.performance_id = p.performance_id
        WHERE e.event_type = 1
          AND p.performance_start_date &lt;= NOW()
          AND p.performance_end_date &gt;= NOW()
    </select>

    <select id="findTicketEventDetail"
            resultType="com.profect.tickle.domain.event.dto.response.TicketEventDetailResponseDto">
        SELECT
            e.event_id AS id,
            p.performance_title AS performanceTitle,
            h.hall_address AS performancePlace,
            p.performance_runtime AS performanceRuntime,
            p.performance_date AS performanceDate,
            s.seat_number AS seatNumber,
            s.seat_grade AS seatGrade,
            e.event_per_price AS perPrice,
            p.performance_img AS performanceImg,
            st.status_description AS eventStatusName
        FROM event e
                 JOIN seat s ON e.seat_id = s.seat_id
                 JOIN performance p ON s.performance_id = p.performance_id
                 JOIN status st ON e.status_id = st.status_id
                 JOIN hall h ON p.hall_id = h.hall_id
        WHERE e.event_id = #{eventId}
    </select>

    <select id="searchTicketEvents" resultMap="TicketListMap">
        SELECT
        e.event_id AS id,
        e.event_name AS name,
        e.event_per_price AS perPrice,
        p.performance_img AS img,
        st.status_id AS statusId,
        p.performance_start_date AS startDate,
        p.performance_end_date AS endDate
        FROM event e
        JOIN seat s ON e.seat_id = s.seat_id
        JOIN performance p ON s.performance_id = p.performance_id
        JOIN status st ON e.status_id = st.status_id
        WHERE e.event_type = 1
        AND e.event_name LIKE '%' || #{keyword} || '%'
        AND p.performance_end_date &gt;= NOW()
        ORDER BY e.event_created_at DESC
        LIMIT #{size}
        OFFSET #{offset}
    </select>

    <select id="countSearchTicketEvents" resultType="int">
        SELECT COUNT(*)
        FROM event e
                 JOIN status s ON e.status_id = s.status_id
        WHERE e.event_type = 1
          AND e.status_id IN (4, 5)
          AND e.event_name LIKE '%' || #{keyword} || '%'
    </select>

    <select id="findRandomOngoingEvents"
            resultType="com.profect.tickle.domain.event.dto.response.SeatProjection">
        SELECT
            e.event_id AS eventId,
            p.performance_id AS performanceId,
            e.event_name AS eventName,
            s.seat_number AS seatNumber,
            p.performance_start_date AS startDate,
            p.performance_end_date AS endDate
        FROM event e
                 JOIN status st ON e.status_id = st.status_id
                 JOIN seat s ON e.seat_id = s.seat_id
                 JOIN performance p ON s.performance_id = p.performance_id
        WHERE st.status_id IN (4, 5)
          AND p.performance_start_date &lt;= NOW()
          AND p.performance_end_date &gt;= NOW()
        ORDER BY RANDOM()
            LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 진행 전 -> 진행 중 -->
    <update id="markEventsAsOngoing">
        UPDATE event e
        SET status_id = 5,
            event_updated_at = NOW()
        FROM seat s
        JOIN performance p ON s.performance_id = p.performance_id
        WHERE e.seat_id = s.seat_id
          AND e.status_id = 4
          AND p.performance_start_date &lt;= NOW()
          AND p.performance_end_date &gt; NOW()
    </update>

    <!-- 진행 전/중 -> 종료 -->
    <update id="markEventsAsFinished">
        UPDATE event e
        SET status_id = 6,
            event_updated_at = NOW()
        FROM seat s
        JOIN performance p ON s.performance_id = p.performance_id
        WHERE e.seat_id = s.seat_id
          AND e.status_id IN (4, 5)
          AND p.performance_end_date &lt;= NOW()
    </update>
</mapper>